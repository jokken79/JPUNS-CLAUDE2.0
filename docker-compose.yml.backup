version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: uns-claudejp-db
    restart: always
    environment:
      POSTGRES_DB: uns_claudejp
      POSTGRES_USER: uns_admin
      POSTGRES_PASSWORD: ${DB_PASSWORD:-uns_secure_pass_2025}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - uns-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U uns_admin -d uns_claudejp"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: uns-claudejp-backend
    restart: always
    environment:
      DATABASE_URL: postgresql://uns_admin:${DB_PASSWORD:-uns_secure_pass_2025}@db:5432/uns_claudejp
      SECRET_KEY: ${SECRET_KEY:-uns_secret_key_change_in_production}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      UPLOAD_DIR: /app/uploads
      OCR_ENABLED: "true"
      GOOGLE_CLOUD_VISION_ENABLED: ${GCV_ENABLED:-false}
      LINE_NOTIFY_TOKEN: ${LINE_TOKEN:-}
      EMAIL_HOST: ${EMAIL_HOST:-smtp.gmail.com}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_USER: ${EMAIL_USER:-}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD:-}
    volumes:
      - ./backend:/app
      - uploads_data:/app/uploads
      - ./config:/app/config
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - uns-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/Dockerfile.frontend
    container_name: uns-claudejp-frontend
    restart: always
    environment:
      REACT_APP_API_URL: ${API_URL:-http://localhost:8000}
      REACT_APP_NAME: UNS-ClaudeJP 1.0
      REACT_APP_COMPANY: UNS-Kikaku
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - uns-network
    command: npm start

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: uns-claudejp-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/build:/usr/share/nginx/html:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - uns-network
    profiles:
      - production

  # Redis Cache (opcional, para futuras optimizaciones)
  redis:
    image: redis:7-alpine
    container_name: uns-claudejp-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - uns-network
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  uploads_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  uns-network:
    driver: bridge
